""" MultiQC module to parse image files generated by GenPipes """

from __future__ import print_function
import logging, re, base64

from multiqc_c3g.modules.c3g_yaml_parser import c3g_yaml_parser
from multiqc_c3g.modules.c3g_counter import c3g_counter

from multiqc import config
from multiqc.modules.base_module import BaseMultiqcModule
#from multiqc_c3g.utils import search_patterns.yaml

# Start the logger
log = logging.getLogger('multiqc')

# Starting the MultiqcModule class to use multiqc name space
class MultiqcModule(BaseMultiqcModule):
    # Starting the a content object using the c3g_yaml_parser
    # Here we provide the name of the module key used in module_order, the current module_order and the config in general
    YamlParser = c3g_yaml_parser.Images('c3g_image_renderer', config.module_order, config)
    # Start the count
    count = 1
    def __init__(self):

        # Initialise the parent object
        super(MultiqcModule, self).__init__(
             name="c3g_image_renderer",
             anchor="c3g_image_renderer",
             )
        c3g_counter.count_and_run(MultiqcModule, self, self.YamlParser, self.name, config)

    def c3g_run(self, image):
        ''' Function
            --------
            Runs the necessary functions that process and plot
            Multiqc c3g images
        '''

        log.info(f"The {image['fn']} image is now processing")
        # Starting running the necesary funtions to process each file
        self.YamlParser.image(image)
        # Set the parent_title if it exists
        if self.YamlParser.parent_title:
            self.name = self.YamlParser.parent_title
        # Run the image addition function
        self.addimage(
            image,
            self.YamlParser.high_res_format,
            self.YamlParser.section_title,
            self.YamlParser.high_res_format,
            self.YamlParser.section_title
            )

    def addimage(self, image, high_res_format='', section_title=''):
        # Function to process each image by converting it to html and
        # encoding in base64

        # Get the image filetype
        file_type = re.findall(r'(?!\.)(?!.*?\.).*\S', image)[0]
        # if the high_res_format is not set then just set the download
        # high res link to the same image
        if not high_res_format:
            high_res_format == file_type
        # Format the download html
        downhtml = """<p style='font-size: large;'>(<a href='{}'>Download the high-res image</a>)
            </p>""".format(re.sub(r'(?!\.)(?!.*?\.).*\S', high_res_format, image))
        # Open the image encode with base64 and then decode it to html
        # Then add a MultiQC section with the image
        with open(image, 'rb') as img:
            base64img = ("<img src = 'data:image/{};base64,".format(file_type) + base64.b64encode(img.read()).decode() + "'>")
            self.add_section(
                name = section_title,
                anchor = image['fn'][:-len(file_type)],
                content=downhtml + '<br>' + base64img
                )
