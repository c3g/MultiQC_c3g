#!/usr/bin/env python
""" MultiQC hook functions - we tie into the MultiQC
core here to add in extra functionality. """


from __future__ import print_function
from pkg_resources import get_distribution
import logging
import json

from multiqc.utils import report, util_functions, config

# Initialise the main MultiQC logger
log = logging.getLogger('multiqc')


# Save this plugin's version number (defined in setup.py) to the MultiQC config
config.c3g_plugin_version = get_distribution("multiqc_c3g").version



def c3g_execution():
    """ Code to execute after the config files and
    command line flags have been parsedself.
    This setuptools hook is the earliest that will be able
    to use custom command line flags.
    """

    # Halt execution if we've disabled the plugin
    if not config.kwargs.get('enable_c3g', True):
        return None

    log.info("Running MultiQC C3G Plugin v{}".format(config.c3g_plugin_version))


    # Add to the search patterns used by modules
    if 'ihec/chipseq' not in config.sp:
        config.update_dict( config.sp, {'ihec/chipseq': {'fn': 'IHEC_metrics_chipseq_*'}})
    if 'ihec/rnaseq' not in config.sp:
        config.update_dict( config.sp, { 'ihec/rnaseq': {'fn': 'IHEC_metrics_rnaseq_*', 'exclude_fn': 'IHEC_metrics_rnaseq_All.txt'}})
    if 'kallisto_c3g/XYZ' not in config.sp:
        config.update_dict( config.sp, { 'kallisto_c3g/XYZ': {'fn': 'file_pattern*'}})
    if 'sleuth/XYZ' not in config.sp:
        config.update_dict( config.sp, { 'sleuth/XYZ': {'fn': 'file_pattern*'}})
 
    # Some additional filename cleaning
    config.fn_clean_exts.extend([
        'IHEC_metrics_chipseq_',
        'IHEC_metrics_rnaseq_'
    ])

    # Ignore some files generated by the custom pipeline
    config.fn_ignore_paths.extend([
        '*/job_output/*'
    ])
