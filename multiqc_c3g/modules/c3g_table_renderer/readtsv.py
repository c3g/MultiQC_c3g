""" MultiQC module script for parsing tsv and csv files generated by GenPipes """

from collections import OrderedDict
import logging, io
import pandas as pd

# Start the logger
log = logging.getLogger('multiqc')

class ReadTSV:
    # Global variables that affect the entire table
    table_config = {'col1_header': '#'} #, 'hidden':True}

    def __init__(self, tsv_file, readtsv_config, table_color_scale):
        self.tsv_pd(tsv_file)
        self.tsv_process(tsv_file, readtsv_config, table_color_scale)

    # Read the tsv or csv using pandas and adjust the index to a human friendly count from 1 no 0
    def tsv_pd(self, tsv_file):
        if tsv_file['fn'][-3:] == "tsv":
            readtsv = pd.read_csv(io.StringIO(tsv_file['f']), sep='\t')
        elif tsv_file['fn'][-3:] == "csv":
            readtsv = pd.read_csv(io.StringIO(tsv_file['f']), sep=',')
        readtsv.index +=1
        self.headers = readtsv.columns.values.tolist()
        self.readtsv = readtsv.to_dict('index')

    def tsv_process(self, tsv_file, readtsv_config, table_color_scale):

        # Header dictionary that contains various information for display and formatting
        self.header_dict = OrderedDict()
        # Grab the descriptions of the headers for the specific table
        des_headers = readtsv_config.get('header_descriptions', {})
        # Grab the configurations/adjustments for the specific table and its columns
        adj_headers = readtsv_config.get('header_adjustments', {})
        # Grab table configurations
        adj_table = readtsv_config.get('table_adjustments', [])

        # Add table adjustments or global table adjustments
        # if they exist
        if not(adj_table) and table_color_scale:
            self.table_config['scale'] = table_color_scale

        for adjustment in adj_table:
            if list(adjustment.keys())[0] == 'scale':
                if not(adjustment['scale']) and table_color_scale:
                    adjustment['scale'] = table_color_scale
                elif adjustment['scale']:
                    adjustment['scale'] = list(adjustment.values())[0]
                else:
                    continue
            self.table_config[list(adjustment.keys())[0]] = list(adjustment.values())[0]

        # Remove character escaping
        for key in list(des_headers.keys()):
            des_headers[key.replace('\\', '')] = des_headers.pop(key)

        # Setting specific header configurations
        for header in self.headers:
            # Finding and setting the description of the headers
            if header in list(des_headers.keys()):
                description = list(des_headers.values())[list(des_headers.keys()).index(header)]
            else:
                description = header
                log.debug(f'''There is no description for the {header} header.
                    Please specify a description in the yaml''')
            self.header_dict[header] = {'title':header.replace('_', ' '), 'description':description}

            # Setting formatting information for percentages
            if any(x in header.lower() + description.lower() for x in ('100 x', '%', 'percent', 'fraction')):
                self.header_dict[header]['suffix'] = ' %'
                self.header_dict[header]['max'] = 100
                self.header_dict[header]['min'] = 0
                self.header_dict[header]['format'] = '{:,.2f}'
                # Setting 4 decimal point format for mitochondrial information
                if 'mitochondria' in header.lower():
                    self.header_dict[header]['format'] = '{:,.4f}'

            # Setting 0 decimal point format for count or amount information
            if any(x in header.lower() + description.lower() for x in ('#', 'count', 'number')):
                self.header_dict[header]['format'] = '{:,.0f}'

        # Adding on pipeline specific adjustments
        for header in list(adj_headers.keys()):
            adjustments = adj_headers.get(header, [])
            for adjustment in adjustments:
                self.header_dict[header][list(adjustment.keys())[0]] = list(adjustment.values())[0]
