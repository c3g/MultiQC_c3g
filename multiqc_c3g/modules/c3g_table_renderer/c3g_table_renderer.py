""" MultiQC module to parse tsv and csv files generated by GenPipes """

from __future__ import print_function
import logging, os, re, datetime

from multiqc_c3g.modules.references import references
from multiqc_c3g.modules.c3g_yaml_parser import c3g_yaml_parser
from multiqc_c3g.modules.c3g_counter import c3g_counter
from . import readtsv

from multiqc import config
from multiqc.modules.base_module import BaseMultiqcModule
from multiqc.plots import table
from multiqc.modules.homer import homer

# Start the logger
log = logging.getLogger('multiqc')

# Starting the MultiqcModule class to use multiqc name space
class MultiqcModule(BaseMultiqcModule):
    # Starting the a content object using the c3g_yaml_parser
    # Here we provide the name of the module key used in module_order, the current module_order and the config in general
    YamlParser = c3g_yaml_parser.Tables('c3g_table_renderer', config.module_order, config)
    # Start the count
    count = 1
    def __init__(self):
        # Initialise the parent object
        super(MultiqcModule, self).__init__(
             name="c3g_table_renderer",
             anchor="c3g_table_renderer",
             )

        # Runing the count function that process each tsv_file and
        # config contents on at a time.
        c3g_counter.count_and_run(MultiqcModule, self, self.YamlParser, self.name, config)

    # This function runs the functions necesary for plotting the table
    def c3g_run(self, tsv_file):
        log.info(f"Processing {tsv_file['fn']}")

        # Run the Tables object processing functions
        self.YamlParser.table(tsv_file)

        # Set the self variable name to the parent title if it is not None or an empty string
        if not self.YamlParser.parent_title in (None, ''):
            self.name = self.YamlParser.parent_title
        else:
            self.name = self.name.replace('_',' ')

        #Run the add table section funtion by passing the correct Tables object variables
        self.add_table_section(
            tsv_file,
            self.YamlParser.section_title,
            self.YamlParser.html,
            self.YamlParser.table_title,
            self.YamlParser.downhtml,
            self.YamlParser.readtsv_config
            )

    # This funtion uses imported objects from readtsv and references to further process and then plot the table.
    def add_table_section(self, tsv_file, section_title, html, table_title, downhtml, readtsv_config):

        # Starting the references object
        cita = references.Reference(html)

        # Starting table parser object
        tableparser = readtsv.ReadTSV(tsv_file, readtsv_config, self.YamlParser.table_color_scale)

        # Setting the section name
        if not section_title in (None, ''):
            setname = section_title
        else:
            setname = None

        # Adding the section to the report
        self.add_section(
            name = setname,
            anchor = tsv_file['fn'][:-4],
            description = cita.htmlcontent + '<h4>' + table_title + ' ' + downhtml + '</h43>',
            plot = table.plot(tableparser.readtsv, tableparser.header_dict, tableparser.table_config),
        )

    # Develop the count class method
    # This count method uses the order list from the c3g_yaml_parser
    @classmethod
    def count_and_run(cls, self):
        for index, _ in enumerate(self.YamlParser.order_list):
            if index + 1 == cls.count:
                # Grab some useful information including table path
                self.YamlParser.tablepathlink(cls.count)
                print(cls.count)
                # Parse each table file (tsv or csv)
        cls.count += 1
        for tsv_file in self.find_log_files("c3g_table_renderer"):
            print(tsv_file['fn'])
            fileloc = tsv_file['root'] + '/' + tsv_file['fn']
            if fileloc[0] != '/':
                fileloc = '/' + fileloc
            # Get the working directory from the config
            # Set the default to report
            # The working directory is the directory where multiqc is going to be run
            filefilter = getattr(config, 'working_dir', 'report') + '/'
            print(filefilter)
            filename = '/' + self.YamlParser.table_path.replace(filefilter, '')
            if fileloc == filename:
                self.table_run(tsv_file)
                print('\nif\n')
                print(fileloc, ' is equal to ', filename)
            else:
                print('\nelse\n')
                print(fileloc, ' is not equal to ', filename)

